func ret_3<>->int {return 3.}
exec {
	var numbers := [1, 3, 5, 8, 11, 12].
	var parityString := <int a>->string {
							if ((a/2)*2 == a) {
								return "even".
							} else {
								return "odd".
							}
						}.
	var parities := numbers map parityString.
	print parities, _n_.
	release parities.
	
	var rats := [2, -1//3, 6//7, -8//16, 0].
	var compareToZero := <rat a>->string {
							if (a > 0) {
								return "+".
							} else {
								if (a == 0) {
									return "0".
								} else {
									return "-".
								}
							}
						}.
	var comparisions := rats map compareToZero.
	print comparisions, _n_.
	release comparisions.
	
	var negate := <rat a>->rat {return 0 - a.}.
	var negations := rats map negate.
	print negations, _n_.
	release negations.
	
	var isPositive := <rat a>->bool {
							if (a > 0) {
								return _true_.
							} else {
								return _false_.
							}
						}.
	var positivity := rats map isPositive.
	print positivity, _n_.
	release positivity.
	
	var floats := [8.2, 7.5, -199, -0.3].
	var duplicate := <float a>->[float] { return [a, a]. }.
	var duplications := floats map duplicate.
	print duplications, _n_.
	release duplications.
	
	# test on length 1
	var length1_int := [1].
	parities := length1_int map parityString.
	print parities, _n_.
	release parities.
	
	var length1_rat := [1//2].
	comparisions := length1_rat map compareToZero.
	print comparisions, _n_.
	release comparisions.
	
	positivity := length1_rat map isPositive.
	print positivity, _n_.
	release positivity.
	
	var length1_float := [8.2].
	duplications := length1_float map duplicate.
	print duplications, _n_.
	release duplications.
	
	# test on lambda
	var ret_1 := <>->int {return 1.}.
	var ret_2 := <>->int {return 2.}.
	var lambda_arr := [ret_1, ret_2].
	var allReturn3 := <<>->int f>-><>->int { return ret_3.}.
	lambda_arr := lambda_arr map allReturn3.
	for elem i of [0, 1, 2] {
		print lambda_arr[i](), _n_.
	}
	release lambda_arr.
}