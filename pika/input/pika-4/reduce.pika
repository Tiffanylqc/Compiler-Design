var numbers:=[1,3,5,8,11,12].
var isOdd:=<int x>->bool {
	return x!=(x/2)*2.
}.

var a1:=[[1,3,5],[3,5,6],[2,4,6],[3,7,8],[1,3,5,7,9,11]].
var allOdd:= <[int] x>->bool{
	for elem i of x{
		if (i==1){
			return _false_.
		}
	}
	return _true_.
}.

var a2:=[_true_,_true_,_true_,_true_,_false_,_false_].
var f1:=<bool x>->bool{
	return x.
}.

var a3:= [[^i^,^a^,^m^],[^a^,^m^,^i^]].
var a4:=[[3//4,4//5,5//6],[14//13,14//15,17//16]].

var f4:=<[rat] x>->bool{
	var mul:=1//1.
	for elem i of x{
		mul:=mul * i.
	}
	if(mul==1//2){
		return _true_.
	}
	return _false_.
}.

var f5:= <rat x>->bool{
	if(x>1){
		return _true_.
	}
	return _false_.
}.

const a5:=["first","second","third"].
const a6:=[["first1","first2","first3"],a5,["four1", "four2","four3","four4"]].

var pickL:=<[string] x>->bool{
	if(length x==3){
		return _true_.
	}
	return _false_.
}.

var pickS:=<string x>->bool{
	if(length x==5){
		return _true_.
	}
	return _false_.
}.

exec{
	print numbers reduce isOdd,_n_.

	print a1 reduce allOdd,_n_.

	print a6 reduce pickL,_n_.

	print a5 reduce pickS,_n_.

	print a2 reduce f1,_n_.

	print a4 reduce f4,_n_.

	print a4[1] reduce f5,_n_.
	#var a:= new[[int]](3).
	#var err:=a[0] reduce isOdd.
	#print err.
}