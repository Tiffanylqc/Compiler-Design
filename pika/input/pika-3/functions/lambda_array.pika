func return_1<>->int {
	return 1.
}

func return_3<>->int {
	return 3.
}

func f<int a, [<>->int] b, int c>->void {
	print "inside f(", a, ", ", b, ", ", c, ")", _n_.
	var i := 0.
	while (i < length b) {
		print "b[", i, "](): ", b[i](), _n_.
		i := i + 1.
	}
	return.
}

func g<>->[<>->int] {
	return [ <>->int { 
			var i := 0.
			while (i < 10) {
				i := i + 1.
				if (i == 3) {
					continue.
				}
			}
			return i.
		},
		<>->int { 
			var i := 0.
			while (i < 20) {
				i := i + 1.
				if (i == 3) {
					break.
				}
			}
			return i.
		}
	].
}

exec {
	var a := new [<>->int] (2).
	a[0] := return_1.
	a[1] := return_3.
	print "a[0](): ", a[0](), _n_.
	print "a[1](): ", a[1](), _n_.
	release a.
	
	a := [return_1, return_3].
	print "a[0](): ", a[0](), _n_.
	print "a[1](): ", a[1](), _n_.
	release a.
	
	
	a := [ <>->int { 
			var i := 0.
			while (i < 10) {
				i := i + 1.
				if (i == 3) {
					continue.
				}
			}
			return i.
		},
		<>->int { 
			var i := 0.
			while (i < 20) {
				i := i + 1.
				if (i == 3) {
					break.
				}
			}
			return i.
		}
	].
	print "a[0](): ", a[0](), _n_.
	print "a[1](): ", a[1](), _n_.
	const b := clone a.
	call f(81, b, 62).
	print a[0], _n_.
	print g()[0]().
	release a.
}